#!/usr/bin/env node --loader=ts-node/esm --no-warnings

import {
  readdirSync,
  readFileSync,
  writeFileSync,
} from 'node:fs'
import { dirname, relative, resolve } from 'node:path'
if (typeof process.argv[4] !== 'string') {
  console.error(
    'usage: build.ts <test template> <plugins dir>'
  )
  process.exit(1)
}

let template = readFileSync(
  resolve(process.argv[2]),
  'utf8'
)
const out = resolve(process.argv[4])
const pluginsDir = resolve(process.argv[3])
const plugins = readdirSync(pluginsDir).map(
  p =>
    './' +
    relative(
      dirname(out),
      resolve(pluginsDir, p).replace(/\.ts/, '.js')
    )
)

const pluginImport = plugins
  .map(
    (p, i) =>
      `import plugin${i} from ${JSON.stringify(p)}\n`
  )
  .join('')

const pluginsCode = `const plugins: PI[] = [
${plugins.map((_, i) => `  plugin${i},\n`).join('')}]
type Plug =
  | TestBase
  | { t: Test }
${plugins
  .map((_, i) => `  | ReturnType<typeof plugin${i}>\n`)
  .join('')}
type PlugKeys =
  | keyof TestBase
  | 't'
${plugins
  .map(
    (_, i) => `  | keyof ReturnType<typeof plugin${i}>\n`
  )
  .join('')}`

const opts = `type SecondParam<
  T extends [any] | [any, any],
  Fallback extends unknown = unknown
> = T extends [any, any] ? T[1] : Fallback

${plugins
  .map(
    (_, i) => `type Plugin${i}Opts = SecondParam<
  Parameters<typeof plugin${i}>,
  TestBaseOpts
>\n`
  )
  .join('')}
type TestOpts = TestBaseOpts${plugins
  .map((_, i) => `\n  & Plugin${i}Opts`)
  .join('')}
`

const testInterface = `type TTest = TestBase
${plugins
  .map((_, i) => `  & ReturnType<typeof plugin${i}>\n`)
  .join('')}
`

const swapTag = (
  src: string,
  tag: string,
  code: string
): string => {
  const st = '//{{' + tag + ' START}}\n'
  const et = '//{{' + tag + ' END}}\n'
  const start = src.indexOf(st)
  const end = src.indexOf(et)
  return (
    src.substring(0, start) + code + src.substring(end + et.length)
  )
}

const swapTags = (
  src: string,
  tags: { [k: string]: string }
): string => {
  let res = src
  for (const [tag, code] of Object.entries(tags)) {
    res = swapTag(res, tag, code)
  }
  return res
}

writeFileSync(
  out,
  swapTags(template, {
    'HEADER COMMENT': `// This file is automatically generated, please do not edit\n`,
    'PLUGIN IMPORT': pluginImport,
    'PLUGINS CODE': pluginsCode,
    OPTS: opts,
    'TEST INTERFACE': testInterface,
  })
)

export {}
